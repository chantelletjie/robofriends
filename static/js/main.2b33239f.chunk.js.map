{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","width","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","fetch","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2KAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,6CCjFlDC,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,GAAMI,MAAO,MAC5D,6BACI,4BAAKN,GACL,2BAAIC,MCqBLM,EA1BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIf,OAEG,6BAESA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CACRC,IAAOD,EACPT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,aCCtBY,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACf,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCkCPI,E,YArCX,aAAe,IAAD,8BAEV,+CAcJC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAdzC,EAAKjC,MAAQ,CACTiB,OAAQ,GACRM,YAAa,IALP,E,iFASM,IAAD,OACfW,MAAM,8CACLxC,MAAK,SAAAyC,GAAQ,OAAGA,EAASC,UACzB1C,MAAK,SAAA2C,GAAK,OAAG,EAAKN,SAAS,CAAEd,OAAQoB,S,+BASjC,IAAD,OACEC,EAAiBC,KAAKvC,MAAMiB,OAAOuB,QAAO,SAAAvB,GAChD,OAAOA,EAAOR,KAAKgC,cAAcC,SAAS,EAAK1C,MAAMuB,YAAYkB,kBAGrE,OACI,yBAAK7B,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWY,aAAgBe,KAAKV,iBAChC,kBAAC,EAAD,CAAUZ,OAAQqB,S,GAhCZK,aCKlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SLY1C,SAAkBzD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyD,IAAIC,eAAwBjE,OAAOC,SAASiE,MACpDC,SAAWnE,OAAOC,SAASkE,OAIvC,OAGFnE,OAAOoE,iBAAiB,QAAQ,WAC9B,IAAM/D,EAAK,UAAM4D,eAAN,sBAEPnE,IAgEV,SAAiCO,EAAOC,GAEtC4C,MAAM7C,GACHK,MAAK,SAAAyC,GAEJ,IAAMkB,EAAclB,EAASmB,QAAQC,IAAI,gBAEnB,MAApBpB,EAASqB,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClE,UAAUC,cAAckE,MAAMhE,MAAK,SAAAC,GACjCA,EAAagE,aAAajE,MAAK,WAC7BV,OAAOC,SAAS2E,eAKpBxE,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFA0D,CAAwBxE,EAAOC,GAI/BC,UAAUC,cAAckE,MAAMhE,MAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,OKtC/BE,I","file":"static/js/main.2b33239f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    \r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}`} width={200} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {    \r\n\r\n    \r\n\r\n    return (\r\n        \r\n       <div>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (<Card \r\n                    key = {i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email} \r\n\r\n                    />\r\n                    );\r\n                    \r\n                })\r\n                \r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='Search Robots' \r\n            onChange={searchChange}\r\n\r\n         />\r\n         </div>\r\n    ) ;\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({ robots: users }));\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n       this.setState({ searchfield: event.target.value })\r\n              \r\n    }\r\n    \r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots=>{\r\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n         })\r\n         \r\n    return (\r\n        <div className='tc'>\r\n            <h1>RoboFriends</h1>\r\n            <SearchBox searchChange = {this.onSearchChange} />\r\n            <CardList robots={filteredRobots}/>\r\n        </div>\r\n    );\r\n\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from './App';\n\n\nReactDOM.render(<App /> ,document.getElementById('root'));\n\nserviceWorker.register();\n\n"],"sourceRoot":""}